package de.tarent.dblayer.engine;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

/**
 * Wrapper-Class for returned Keys.
 * Manages auto-generated Keys returned by an INSERT-Statement
 * and makes them available to the caller.
 *
 * <b>This does only work reliable when there is only on PK available.</b>
 * For other cases, you have to use the #get(String key) call, where key is the
 * Name of the column with autogenerated values.
 *
 * @author kirchner
 */
public class InsertKeys {
    public static InsertKeys EMPTY_INSTANCE = new InsertKeys();

    private Map keys;

    InsertKeys() {
        keys = new HashMap();
    }

    /**
     *
     */
    InsertKeys(Map keys) {
        this.keys = keys;
    }

    void put(String key, Object value) {
        keys.put(key, value);
    }

    void putAll(Map keys) {
        keys.putAll(keys);
    }

    void putAll(InsertKeys ik) {
        keys.putAll(ik.keys);
    }

    /**
     * Returns the value of the inserted PK.
     * <b>If there is no distinct PK available (zero or more than one
     * autogenerated value), or if the value is no Number, a {@link RuntimeException}
     * is thrown!</b>
     *
     * @return autogenerated value of PK as int
     */
    public int getPk() {
        if (keys.size() < 1) {
            throw new RuntimeException("No explicit PK is available! (Less than 1 autogenerated value)");
        } else if (keys.size() > 1) {
            throw new RuntimeException("No explicit PK is available! (More than 1 autogenerated value)");
        } else {
            Set keyset = keys.keySet();
            try {
                return Integer.parseInt(keys.get(keyset.toArray()[0]).toString());
            } catch (NumberFormatException e) {
                throw new RuntimeException("Key is not an int!", e);
            }
        }
    }

    /**
     * Returns the value of the inserted PK.
     * <b>If there is no distinct PK available (zero or more than one
     * autogenerated value), or if the value is no Number, a {@link RuntimeException}
     * is thrown!</b>
     *
     * @return autogenerated value of PK as int
     */
    public Integer getPkAsInteger() {
        return new Integer(getPk());
    }

    /**
     * Return the specified key from list of generated values.
     * Maybe null if key is not available.
     *
     * @param key Key to retrieve value
     * @return generated value if key available, <code>null</code> otherwise.
     */
    public Object get(String key) {
        return keys.get(key);
    }
}
