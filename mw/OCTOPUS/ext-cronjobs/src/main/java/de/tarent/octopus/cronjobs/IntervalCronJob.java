/*
 * tarent-octopus cronjob extension,
 * an opensource webservice and webapplication framework (cronjob extension)
 * Copyright (c) 2006-2007 tarent GmbH
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License,version 2
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301, USA.
 *
 * tarent GmbH., hereby disclaims all copyright
 * interest in the program 'tarent-octopus cronjob extension'
 * Signature of Elmar Geese, 11 June 2007
 * Elmar Geese, CEO tarent GmbH.
 */

/*
 * Copyright (c) tarent GmbH
 * Bahnhofstrasse 13 . 53123 Bonn
 * www.tarent.de . info@tarent.de
 *
 * Created on 28.02.2006
 */

package de.tarent.octopus.cronjobs;

import java.util.Map;

/**
 * This implements an interval driven CronJob. This job will be run
 * every interval.
 *
 * @author Michael Kleinhenz (m.kleinhenz@tarent.de)
 * @author Nils Neumaier (n.neumaier@tarent.de)
 *
 */
public class IntervalCronJob extends CronJob
{
    public static final String PROPERTIESMAP_KEY_INTERVAL  = "interval";
    private int intervalMinutes = -1;

    /**
     * Creates a new CronJob that runs every intervalMinutes.
     *
     * @param intervalMinutes
     * @param alreadyRunning    responisble for the behaviour of the job if this job is already running
     */
    public IntervalCronJob(Cron cron, int intervalMinutes)
    {
    	super(cron);
        this.intervalMinutes = intervalMinutes;
        //setLastRun(new Date());
    }

    /**
     * Returns the type of this CronJob.
     */
    public int getType()
    {
        return Cron.INTERVAL_CRONJOB;
    }

    public int getIntervalMinutes()
    {
        return intervalMinutes;
    }

    public void setIntervalMinutes(int intervalMinutes)
    {
        this.intervalMinutes = intervalMinutes;
    }

    /**
     * Extends the method getCronJobMap() of the abstract superclass CronJob
     * The cronjobmap generated by the superclass is extended by property values
     * specific for interval-cronjobs
     */

    public Map getCronJobMap(){
        Map cronJobMap = super.getCronJobMap();
        Map properties = (Map)cronJobMap.get(Cron.CRONJOBMAP_KEY_PROPERTIES);

        properties.put(IntervalCronJob.PROPERTIESMAP_KEY_INTERVAL, new Integer(getIntervalMinutes()));
        cronJobMap.put(Cron.CRONJOBMAP_KEY_PROPERTIES, properties);

        return cronJobMap;
    }

}
